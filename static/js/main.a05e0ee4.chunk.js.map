{"version":3,"sources":["audio/wood.mp3","audio/bell-ting.mp3","audio/click.mp3","audio/meow.mp3","audio/snare.mp3","audio/kick.mp3","audio/bark.mp3","Util.jsx","InputWithIncrementButtons.jsx","SliderInput.jsx","BPMinput.jsx","Timer.jsx","Metronome.jsx","index.jsx"],"names":["module","exports","Util","addLeadingZero","number","addition","Number","flashColor","target","color","holdTime","el","document","getElementById","origColor","style","backgroundColor","setTimeout","InputWithIncrementButtons","property","state","dispatch","settings","max","hasOwnProperty","min","useState","buttonIsHeld","setButtonIsHeld","buttonIsDown","setButtonIsDown","increment","setIncrement","isNewFocus","setIsNewFocus","handleMouseDown","clickIncrement","handleMouseUp","newValue","useEffect","holdInterval","setInterval","clearInterval","className","type","onMouseDown","onMouseUp","onMouseOut","id","value","onKeyDown","e","key","length","substring","String","displayLeadingZero","onFocus","onBlur","SliderInput","setValue","minValue","valueRatio","maxValue","getSliderValue","sliderValue","setSliderValue","onChange","convertSliderValue","updateValue","BPMinput","BPM","setBPM","initalBPMState","useReducer","action","newBPM","BPMState","props","rightKeyDown","setRightKeyDown","leftKeyDown","setLeftKeyDown","ev","Event","bubbles","dispatchEvent","addEventListener","getTempo","tempo","setTempo","Timer","timeState","timerPlayMode","timeReducer","setTimerPlayMode","inputButtonProps","timer","newTime","currentTime","seconds","minutes","hours","play","decreaseTime","onClick","CustomRadio","Radio","Metronome","audioIDs","BPMProps","playMode","setPlayMode","getClickTime","sound","metronomeSound","metronome","ended","pause","volume","setVolume","newVolume","forEach","audio","settingsView","setSettingsView","setMetronomeSound","timerProps","Provider","size","src","Wood","BellTing","Click","Meow","Snare","Kick","Bark","FormControl","component","RadioGroup","name","FormControlLabel","control","label","root","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.a05e0ee4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wood.f56443f5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-ting.1020003c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click.050d261a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/meow.b6c6c54f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare.867e6ece.mp3\";","module.exports = __webpack_public_path__ + \"static/media/kick.226f07c9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bark.3fa2c1a2.mp3\";","function addLeadingZero(number, addition) { \n\tnumber = Number(number) + addition; \n\t\n\tif(number < 0) {\n\t\treturn '00';\n\t} else if(number < 10) {\n\t\treturn '0' + number;\n\t} else {\n\t\treturn number;\n\t} \n}\n\nfunction flashColor(target, color, holdTime) { \n\tlet el = document.getElementById(target); \n\tlet origColor = el.style.backgroundColor;\n\n\tel.style.backgroundColor = color;\n\n\tsetTimeout(() => {\n\t\tel.style.backgroundColor = origColor;\n\t}, holdTime);\n}\n\n\nconst Util = {addLeadingZero, flashColor};\nexport default Util;","import React, {useState, useEffect} from 'react';\nimport Util from './Util.jsx'; \n\nfunction InputWithIncrementButtons({property, state, dispatch, settings}) {   \n\tlet max = (settings.hasOwnProperty('max') && settings.max || '99');\n\tlet min = (settings.hasOwnProperty('min') && settings.min || '0');\n\n\tlet {addLeadingZero} = Util;   \n\tlet [buttonIsHeld, setButtonIsHeld] = useState(false);\n\tlet [buttonIsDown, setButtonIsDown] = useState(false);\n\tlet [increment, setIncrement] = useState(null);\n\n\tlet [isNewFocus, setIsNewFocus] = useState(false);\n\n\t// Util\n\t\tfunction getNumberFromKey(key) {\n\t\t\tif(key === 'ArrowUp') {\n\t\t\t\treturn 1;\n\t\t\t} else if (key === 'ArrowDown') {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction removeFirstDigit(number) {\n\t\t\treturn String(number).substring(1,); \n\t\t}\n\n\t// Key down\n\t\tfunction handleKeyDown(e) {      \n\t\t\tlet increment = getNumberFromKey(e.key);\n\t\t\tlet newValue = e.target.value;     \n \n\t\t\t// If number\n\t\t\tif(increment === 0 && typeof(Number(e.key)) === 'number') {  \n\t\t\t\tif(isNewFocus) { \n\t\t\t\t\tnewValue = e.key;\n\t\t\t\t} else {   \n\t\t\t\t\tif(newValue.length >= 3) { \n\t\t\t\t\t\tnewValue = Number(newValue.substring(1,3)); \n\t\t\t\t\t\tnewValue = Number(String(newValue) + String(e.key)); \n\t\t\t\t\t} else { \n\t\t\t\t\t\tnewValue += Number(e.key); \n\t\t\t\t\t} \n\t\t\t\t} \n\t\t\t// If up arrow or down arrow\n\t\t\t} else { \n\t\t\t\tif(settings.displayLeadingZero) {\n\t\t\t\t\tnewValue = addLeadingZero(newValue, increment); \n\t\t\t\t} else {\n\t\t\t\t\tnewValue = Number(newValue) + increment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetIsNewFocus(false);    \n\t\t\tdispatch({target: property, newValue}); \n\t\t}  \n \n\t// button click   \n\t\tfunction handleMouseDown(increment) {\n\t\t\tclickIncrement(increment); \n\t\t\tsetButtonIsDown(true);\n\n\t\t\tsetTimeout(() => {  \n\t\t\t\tsetButtonIsHeld(true);   \n\t\t\t\tsetIncrement(increment);\n\t\t\t}, 1000); \n\t\t}\n\n\t\tfunction handleMouseUp() {   \n\t\t\tsetButtonIsDown(false);\n\t\t\tsetButtonIsHeld(false);\n\t\t\tsetIncrement(null);\n\t\t}\n\n\t\tfunction clickIncrement(increment) {  \n\t\t\tlet newValue = addLeadingZero(state[property], increment);   \n\t\t\tdispatch({target: property, newValue});  \n\t\t}\n\n\t// button hold\n\t\tuseEffect(() => {  \n\t\t\tif(buttonIsDown && buttonIsHeld) {  \n\t\t\t\tlet holdInterval = setInterval(() => {\n\t\t\t\t\tclickIncrement(increment);\n\t\t\t\t}, 100);\n\n\t\t\t\treturn () => clearInterval(holdInterval);\n\t\t\t} else if(!buttonIsDown && buttonIsHeld) {\n\t\t\t\tsetButtonIsHeld(false);\n\t\t\t}\n\t\t}, [buttonIsDown, buttonIsHeld, state, increment]); \n\n\treturn (\n\t\t<div className=\"timerInputButtonContainer\">    \n\t\t\t<button type=\"button\"   \n\t\t\t\t\tonMouseDown={() => handleMouseDown(-1)}\n\t\t\t\t\tonMouseUp={handleMouseUp}\n\t\t\t\t\tonMouseOut={handleMouseUp} \n\t\t\t\t\tclassName={property+\"Input\"}\n\t\t\t\t\tid={property+\"DecreaseButton\"}\n\t\t\t> - </button>\n\t\t\t<input id={property+\"input\"}\n\t\t\t\ttype=\"number\" \n\t\t\t\tmin={min}\n\t\t\t\tmax={max} \n\t\t\t\tvalue={state[property]} \n\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\tonFocus={() => setIsNewFocus(true)} \n\t\t\t\tonBlur={() => setIsNewFocus(false)}\n\t\t\t\tclassName={property+\"Display\"}\n\t\t\t/>\n\t\t\t<button type=\"button\" \n\t\t\t\t\tonMouseDown={() => handleMouseDown(1)}\n\t\t\t\t\tonMouseUp={handleMouseUp} \n\t\t\t\t\tonMouseOut={handleMouseUp}  \n\t\t\t\t\tclassName={property+\"Input\"}\n\t\t\t\t\tid={property+\"IncreaseButton\"}\n\t\t\t> + </button>\n\t\t</div>\n\t)\n} \n\nexport default InputWithIncrementButtons;","import React, {useState} from 'react';\n\nfunction SliderInput({value, setValue, minValue, maxValue}) {\n    let valueRatio = (maxValue - minValue) / 100;\n    let [sliderValue, setSliderValue] = useState(getSliderValue(value));\n     \n    function handleSliderChange(e) {\n        setSliderValue(e.target.value);\n        updateValue(e.target.value);\n    }\n\n    function updateValue(value) {\n        let newValue = convertSliderValue(value);\n        setValue(newValue);\n    }\n\n    function convertSliderValue(value) { \n        return value * valueRatio;\n    }\n\n    function getSliderValue(value) { \n        return value / valueRatio;\n    }\n    \n    return (\n        <input type=\"range\" min=\"0\" max=\"100\" \n            value={sliderValue} \n            onChange={handleSliderChange}/> \n    )\n}\n\nexport default SliderInput;","import React, {useState, useReducer, useEffect} from 'react';\nimport InputWithIncrementButtons from './InputWithIncrementButtons.jsx';\n\nfunction BPMinput({BPM, setBPM}) {\n\t// BPM  \n        let initalBPMState = { BPM };\n        const [BPMState, dispatch] = useReducer(BPMReducer, initalBPMState);\n        let props = {property: 'BPM', state: BPMState, dispatch, settings: {displayLeadingZero: false}};\n        let [rightKeyDown, setRightKeyDown] = useState(false);\n        let [leftKeyDown, setLeftKeyDown] = useState(false);\n\n        function BPMReducer(state, action) {   \n            let newBPM = action.newValue; \n            setBPM(newBPM);\n            return {BPM: newBPM};  \n        } \n\n        useEffect(() => { \n            if(rightKeyDown) { \n                let ev = new Event('mousedown', {bubbles: true});  \n                document.getElementById('BPMIncreaseButton').dispatchEvent(ev); \n            } else if (!rightKeyDown) {\n                let ev = new Event('mouseup', {bubbles: true});  \n                document.getElementById('BPMIncreaseButton').dispatchEvent(ev);\n            }\n        }, [rightKeyDown])\n\n        useEffect(() => {\n            if(leftKeyDown) {\n                let ev = new Event('mousedown', {bubbles: true});  \n                document.getElementById('BPMDecreaseButton').dispatchEvent(ev); \n            } else if(!leftKeyDown) {\n                let ev = new Event('mouseup', {bubbles: true});  \n                document.getElementById('BPMDecreaseButton').dispatchEvent(ev);\n            }\n        }, [leftKeyDown])\n \n        document.addEventListener('keydown', (e) => {\n\t\t\tif(e.key === 'ArrowRight' && !rightKeyDown) { \n                setRightKeyDown(true);  \n\t\t\t} else if(e.key === 'ArrowLeft' && !leftKeyDown) { \n\t\t\t\tsetLeftKeyDown(true);\n\t\t\t}\n        });\n\n        document.addEventListener('keyup', (e) => {\n            if(e.key === 'ArrowRight') {   \n                setRightKeyDown(false); \n            } else if(e.key === 'ArrowLeft') { \n                setLeftKeyDown(false);\n            }\n        }) \n\n    // TEMPO\n        let [tempo, setTempo] = useState(getTempo(BPMState.BPM));\n\n        function getTempo(BPM) {\n            if(BPM === 0) {\n                return '';\n            } else if(BPM >= 1 && BPM <= 20) {\n                return 'Larghissimo';\n            } else if (BPM >= 20 && BPM <= 40) {\n                return 'Grave';\n            } else if (BPM >= 40 && BPM <= 60) {\n                return 'Lento / Largo';\n            } else if (BPM >= 60 && BPM <= 66) {\n                return 'Larghetto';\n            } else if (BPM >= 67 && BPM <= 75) {\n                return 'Adagio';\n            } else if (BPM >= 76 && BPM <= 107) {\n                return 'Andante';\n            } else if (BPM >= 108 && BPM <= 119) {\n                return 'Moderato';\n            } else if (BPM >= 120 && BPM <= 167) {\n                return 'Allegro';\n            } else if (BPM >= 168 && BPM <= 200) {\n                return 'Presto';\n            } else if (BPM >= 201) {\n                return 'Prestissimo';\n            } \n        }\n\n        useEffect(() => { \n            setTempo(getTempo(BPMState.BPM));\n        }, [BPMState.BPM]);\n\n\treturn ( \n        <div className=\"BPMComponent\">\n    \t\t<InputWithIncrementButtons {...props}/>\n            <div className=\"tempoContainer\">\n                {tempo}\n            </div> \n        </div>\n\t);\n};\n\nexport default BPMinput;\n\n","import React, {useState, useEffect, useReducer} from 'react';\nimport Util from './Util.jsx';\nimport InputWithIncrementButtons from './InputWithIncrementButtons.jsx';\nimport './styles/timerStyle.css';\n\nfunction Timer({timeState, dispatch, timeReducer, timerPlayMode, setTimerPlayMode}) {  \n\tlet {addLeadingZero} = Util;\n\n\t// Set time \n\t\tconst inputButtonProps = {state: timeState, dispatch, settings: { displayLeadingZero: true, max: 60}};\n\n\t// Run timer\n\t\tfunction decreaseTime(currentTime) {\n\t\t\tlet {seconds, minutes, hours} = currentTime; \n\t\t\tseconds = addLeadingZero(seconds, -1); \n\n\t\t\t// if seconds === 0 \n\t\t\tif(seconds === '00') {\n\t\t\t\t// minus one minute\n\t\t\t\tif(Number(minutes) > 0) seconds = '60';\n\t\t\t\tminutes = addLeadingZero(minutes, -1); \n\t\t\t}\n\t\t\t\n\t\t\t// if minutes === 0\n\t\t\tif(minutes === '00') {\n\t\t\t\tif(Number(hours) > 0) minutes = '60';\n\t\t\t\thours = addLeadingZero(hours, -1); \n\t\t\t} \n\n\t\t\t// if all === 0\n\t\t\tif(hours === '00' && minutes === '00' && seconds === '00') { \n\t\t\t\t// play end sound\n\t\t\t\tdocument.getElementById('bellTingAudio').play();\n\t\t\t\tsetTimerPlayMode('stop');\n\t\t\t}\n\n\t\t\treturn {hours, minutes, seconds};\n\t\t}\n \n\t// Play Pause Stop\n\t\tuseEffect(() => {\n\t\t\tif(timerPlayMode === 'play') {\n\t\t\t\tconst timer = setInterval(() => {\n\t\t\t\t\tlet newTime = decreaseTime(timeState); \n\t\t\t\t\tdispatch({target: 'play', newTime});\n\t\t\t\t}, 1000);\n\n\t\t\t\treturn () => clearInterval(timer);\n\t\t\t}\n\t\t}, [timerPlayMode, timeState])\n\n\t\tfunction stop() { \n\t\t\tsetTimerPlayMode('stop');\n\t\t\tdispatch({target: 'stop'});\n\t\t}\n\n\t\tfunction play() { \n\t\t\tsetTimerPlayMode('play'); \n\t\t}\n\n\t\tfunction pause() {\n\t\t\tif(timerPlayMode === 'pause') {\n\t\t\t\tsetTimerPlayMode('play');\n\t\t\t} else {\n\t\t\t\tsetTimerPlayMode('pause');\n\t\t\t} \n\t\t} \n\n\treturn ( \n\t\t<div className=\"timerContainer\">\n\t\t\t<div className=\"timerInputContainer\">\n\t\t\t\t<InputWithIncrementButtons className=\"timerInput\" property=\"hours\" {...inputButtonProps}/>\n\t\t\t\t<InputWithIncrementButtons className=\"timerInput\" property=\"minutes\" {...inputButtonProps}/>\n\t\t\t\t<InputWithIncrementButtons className=\"timerInput\" property=\"seconds\" {...inputButtonProps}/> \n\t\t\t</div>\n\t\t\t<div className=\"timerButtonContainer\">\n\t\t\t\t<button type=\"button\" onClick={play}>Play</button>\n\t\t\t\t<button type=\"button\" onClick={pause}>Pause</button>\n\t\t\t\t<button type=\"button\" onClick={stop}>Stop</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Timer;","/*\n    Settings:     \n     \n    fix timer + change view\n\n\n\n    unit test\n\n    time signatures + light + accent  \n*/\n\n\nimport React, {useEffect, useState, useReducer} from 'react';\nimport './styles/metronomeStyle.css'; \nimport { FaCog } from 'react-icons/fa'; \n\nimport { IconContext } from \"react-icons\"; \n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport InputWithIncrementButtons from './InputWithIncrementButtons.jsx';\nimport SliderInput from './SliderInput.jsx'; \nimport BPMinput from './BPMinput.jsx';\nimport Timer from \"./Timer.jsx\";\n\nimport Wood from './audio/wood.mp3';\nimport BellTing from './audio/bell-ting.mp3';\nimport Click from './audio/click.mp3';\nimport Meow from './audio/meow.mp3';\nimport Snare from './audio/snare.mp3';\nimport Kick from './audio/kick.mp3';\nimport Bark from './audio/bark.mp3';\n\nimport Util from './Util.jsx';\n\nconst Metronome = () => { \n    // Util\n        let {flashColor} = Util; \n        let audioIDs = [\"woodAudio\", \"bellTingAudio\", \"clickAudio\", \"catAudio\", \"snareDrumAudio\", \"kickDrumAudio\", \"dogAudio\"]; \n\n    // BPM \n        let [BPM, setBPM] = useState(80);\n        let BPMProps = {BPM, setBPM};\n\n    // PLAY\n        let [playMode, setPlayMode] = useState('stop');  \n        let clickTime = getClickTime(BPM);   \n        let [keyIsDown, setKeyIsDown] = useState(false);\n        let [keyIsHeld, setKeyIsHeld] = useState(false);\n        let [currentKey, setCurrentKey] = useState(null);\n\n        useEffect(() => {   \n            if(playMode === 'play') { \n                let sound = document.getElementById(metronomeSound+'Audio'); \n\n                const metronome = setInterval(() => {  \n                    if(!sound.ended) {\n                        sound.pause();\n                        sound.currentTime = 0;\n                    } \n\n                    sound.play(); \n                    (document.getElementById('BPMinput') && flashColor('BPMinput', '#64baff', 200));\n                }, getClickTime(BPM));\n\n                return () => clearInterval(metronome);\n            } \n        }, [playMode, BPM]);\n     \n        function getClickTime(BPM) {\n            return 60000 / BPM;\n        }\n\n        function play() {\n            setPlayMode('play');\n        }\n\n        function stop() {\n            setPlayMode('stop');\n        } \n\n        document.addEventListener('keydown', (e) => { \n            if(e.key === ' ') {\n                if(playMode === 'play') {\n                    setPlayMode('stop');\n                } else if(playMode === 'stop') {\n                    setPlayMode('play');\n                }\n            }  \n        });\n \n    // Volume\n        let [volume, setVolume] = useState(0.5);\n\n        useEffect(() => { \n            updateVolume(volume);\n        }, [volume]);\n\n        function updateVolume(newVolume) { \n            audioIDs.forEach(audio => document.getElementById(audio).volume = newVolume); \n        }  \n\n    // Settings\n        let [settingsView, setSettingsView] = useState(false);\n        let [metronomeSound, setMetronomeSound] = useState('wood'); \n\n        function handleChange(e) { \n            if(playMode === 'play') {\n                setPlayMode('stop');\n                setMetronomeSound(e.target.value);  \n                setTimeout(() => {\n                    setPlayMode('play');\n                }, 1);\n            } else {\n                setMetronomeSound(e.target.value); \n            } \n        } \n\n    // Timer \n        let initialTimeState = {hours: '00', minutes: '00', seconds: '00'};\n        const [timeState, dispatch] = useReducer(timeReducer, initialTimeState);\n        let [timerPlayMode, setTimerPlayMode] = useState('stop'); \n\n        function timeReducer(timeState, action) { \n            let {hours, minutes, seconds} = timeState; \n\n            switch(action.target) {\n                case 'hours': \n                    hours = action.newValue;\n                    break;\n                case 'minutes': \n                    minutes = action.newValue;\n                    break;\n                case 'seconds':\n                    seconds = action.newValue; \n                    break;\n                case 'play': \n                    hours = action.newTime.hours;\n                    minutes = action.newTime.minutes;\n                    seconds = action.newTime.seconds;\n                    break;\n                case 'stop':\n                    seconds = '00';\n                    minutes = '00';\n                    hours = '00';\n                    break;\n            } \n\n            return {hours, minutes, seconds}; \n        }\n\n        let timerProps = {timeState, dispatch, timeReducer, timerPlayMode, setTimerPlayMode};\n\n    return (\n        <div> \n            <div className=\"metronomeContainer\" id=\"metronomeContainer\"> \n                <div className=\"cogContainer\" id=\"cogContainer\" onMouseDown={() => setSettingsView(settingsView = !settingsView)}>\n                    <IconContext.Provider value={{ color: \"black\", className: \"Cog\", id: \"cog\"}}>\n                    <FaCog size={30}/> \n                    </IconContext.Provider>\n                </div>  \n\n                <audio src={Wood} id=\"woodAudio\"/>\n                <audio src={BellTing} id=\"bellTingAudio\"/>\n                <audio src={Click} id=\"clickAudio\"/>\n                <audio src={Meow} id=\"catAudio\"/>\n                <audio src={Snare} id=\"snareDrumAudio\"/>\n                <audio src={Kick} id=\"kickDrumAudio\"/>\n                <audio src={Bark} id=\"dogAudio\"/> \n            \n                { settingsView ?\n                <div className=\"settingsView\"> \n                    {/* Choose Metronome Sound */}  \n                        <div className=\"metronomeSoundRadios\">\n                            <FormControl component=\"fieldset\">\n                                <h3>Metronome Sound</h3>\n                                <RadioGroup name=\"sound\" value={metronomeSound} onChange={handleChange}>\n                                    <FormControlLabel value=\"wood\" control={<CustomRadio/>} label=\"Wood\"/>\n                                    <FormControlLabel value=\"click\" control={<CustomRadio/>} label=\"Click\"/>\n                                    <FormControlLabel value=\"snareDrum\" control={<CustomRadio/>} label=\"Snare Drum\"/>\n                                    <FormControlLabel value=\"kickDrum\" control={<CustomRadio/>} label=\"Kick Drum\"/>\n                                    <FormControlLabel value=\"cat\" control={<CustomRadio/>} label=\"Cat\"/>\n                                    <FormControlLabel value=\"dog\" control={<CustomRadio/>} label=\"Dog\"/>\n                                </RadioGroup>\n                            </FormControl> \n                        </div>\n                    {/* Time Signature */}\n\n                    {/* Tap Tempo */}\n                </div>\n                : \n                <div className=\"metronomeView\"> \n\n                    <BPMinput {...BPMProps}/>   \n\n                    <div className=\"buttonContainer\">\n                        <button onClick={play} id=\"playButton\" className=\"BPMButton\">Play</button>\n                        <button onClick={stop} id=\"stopButton\" className=\"BPMButton\">Stop</button> \n                    </div> \n\n                    <div className=\"volumeContainer\">\n                        <SliderInput value={volume} setValue={setVolume} minValue={0} maxValue={1}/> \n                        <br/>\n                    </div>\n\n                    <div className=\"timerComponentContainer\">\n                        <Timer {...timerProps}/>\n                    </div>\n                </div>\n                }\n            </div> \n        </div>\n    )\n}\n\nfunction CustomRadio(props) {\n    return (\n        <Radio\n            className=\"radio\"  \n            color=\"white\"\n            {...props}\n        />\n    )\n}\n \nexport default Metronome;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Metronome from \"./Metronome.jsx\";\n\nvar root = document.querySelector(\"#root\");\n\nReactDOM.render(\n\t<>\n\t\t<Metronome/>  \n\t</>,\n\troot\n);"],"sourceRoot":""}