{"version":3,"sources":["audio/Wood.mp3","audio lazy /^/.*/.mp3$/ groupOptions: {} namespace object","components/AudioElements.jsx","components/SettingsViewToggle.jsx","components/SettingsView.jsx","components/ClickHoldButton.jsx","components/utils.js","components/BpmDisplay.jsx","components/VolumeSlider.jsx","components/TimerInput.jsx","components/Timer.jsx","Metronome.jsx","index.jsx"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","AudioElements","onLoad","useState","loadedAudio","setLoadedAudio","finishedLoading","setFinishedLoading","a","result","src","default","loadAudioFromIds","promises","loadAudio","useEffect","className","audioObject","key","preload","SettingsViewToggle","handleClick","onClick","size","SettingsView","show","options","selectedOption","showClass","FormControl","component","RadioGroup","name","value","onChange","option","FormControlLabel","control","Radio","color","label","ClickHoldButton","handleClickHold","isDisabled","children","isDown","setIsDown","holdTime","setHoldTime","incrementTime","setIncrementTime","onTrigger","incrementHoldTime","time","oldVal","holdTimeInterval","setInterval","clearInterval","Math","round","onMouseDown","onMouseUp","onMouseOut","disabled","playSound","sound","pause","currentTime","play","BpmDisplay","bpm","setBpm","buttonSound","tempo","setTempo","changeBpm","newBpm","newTempo","getTempo","VolumeSlider","volume","setVolume","sliderValue","setSliderValue","type","min","max","target","newVolume","convertSliderValue","updateVolume","TimerInput","setValue","i","Date","parse","timerInputId","newVal","maxLength","String","length","Number","addToEndOfInputNumber","number","string","addLeadingZero","Timer","finishedSound","playMode","setPlayMode","hours","setHours","minutes","setMinutes","seconds","setSeconds","buttonsDisabled","setButtonsDisabled","decrementTime","decrementSeconds","decrementMinutes","decrementHours","checkIfFinished","resetTime","timeout","setTimeout","clearTimeout","Metronome","audioIDs","metronomeSounds","selectedMetronomeSound","setSelectedMetronomeSound","metronomeSound","setMetronomeSound","getMetronomeTime","metronomeTime","setMetronomeTime","timerFinishedSound","setTimerFinishedSound","buttonClickSound","setButtonClickSound","showSettingsView","setShowSettingsView","onVolumeChange","forEach","element","document","getElementById","changeVolume","onStop","interval","stopMetronomeInterval","startMetronomeInterval","intervalTime","updateMetronomeSound","newSound","thisInterval","onPlay","newTime","style","height","window","getComputedStyle","keepHeight","hidden","root","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.07148725.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Wood.f56443f5.mp3\";","var map = {\n\t\"./Bell.mp3\": [\n\t\t54,\n\t\t3\n\t],\n\t\"./Cat.mp3\": [\n\t\t55,\n\t\t4\n\t],\n\t\"./Click.mp3\": [\n\t\t56,\n\t\t5\n\t],\n\t\"./Dog.mp3\": [\n\t\t57,\n\t\t6\n\t],\n\t\"./Kick-Drum.mp3\": [\n\t\t58,\n\t\t7\n\t],\n\t\"./Snap.mp3\": [\n\t\t59,\n\t\t8\n\t],\n\t\"./Snare-Drum.mp3\": [\n\t\t60,\n\t\t9\n\t],\n\t\"./Wood.mp3\": [\n\t\t27\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 40;\nmodule.exports = webpackAsyncContext;","import React, {useEffect, useState} from 'react';\r\nimport Wood from './../audio/Wood.mp3';\r\n\r\nexport default function AudioElements({ids, onLoad}) { \r\n\t/*\r\n\t\t* import audio file for each id\r\n\t\t* create audio element for each id\r\n\t*/ \r\n\r\n\t// ============================== Constants ============================== //\r\n\tconst [loadedAudio, setLoadedAudio] = useState({});\r\n\tconst [finishedLoading, setFinishedLoading] = useState(false);\r\n\r\n\t// ============================== Helper Fns ============================= //\r\n\tasync function loadAudio(id) {\r\n\t\treturn await import(`./../audio/${id}.mp3`).then(result => {\r\n\t\t\treturn {id: id, src: result.default};\r\n\t\t})\r\n\t} \r\n\r\n\tfunction loadAudioFromIds(ids) {\r\n\t\tconst promises = ids.map(id => loadAudio(id));\r\n\t\tPromise.all(promises).then((result) => { \r\n\t\t\tsetLoadedAudio(result)\r\n\t\t\tsetFinishedLoading(true)\r\n\t\t\tonLoad()\r\n\t\t})\r\n\t}\r\n\r\n\t// ============================== Listen / trigger ======================= //\r\n\tuseEffect(() => {\r\n\t\tloadAudioFromIds(ids)\r\n\t}, [])\r\n \t\r\n \t// ============================== Output ================================ //\r\n  return (\r\n  \t<div className=\"audio-element-container\"> \r\n  \t\t{\t\r\n  \t\t\tfinishedLoading &&\r\n  \t\t\tloadedAudio.map(audioObject => { \r\n  \t\t\t\tconst {id, src} = audioObject;\r\n  \t\t\t\treturn <audio src={src} id={id} key={id} preload=\"true\"/>\r\n  \t\t\t}) \r\n  \t\t}\r\n  \t</div>\r\n  )\r\n}   ","import React from 'react';\r\nimport { FaCog } from 'react-icons/fa';\r\nimport { IconContext } from \"react-icons\";\r\nimport './../styles/SettingsViewToggle.css';\r\n\r\nexport default function SettingsViewToggle({handleClick}) {\r\n\treturn (\r\n\t\t<div className=\"cog-container\" id=\"cogContainer\" onClick={handleClick}> \r\n     \t<FaCog size={30} className=\"cog\"/>  \r\n    </div>  \r\n\t)\r\n}","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport './../styles/SettingsView.css';\r\n\r\nexport default function SettingsView({show, options, selectedOption, handleClick}) {\r\n  const showClass = show ? 'show-settings-view' : 'hide-settings-view'; \r\n\r\n  return (\r\n    <div className={`settings-view ${showClass}`}> \r\n      <FormControl component=\"fieldset\">\r\n        <h3>Metronome Sound</h3>\r\n        <RadioGroup name=\"sound\" value={selectedOption} onChange={handleClick}>\r\n          {\r\n            options.map(option => <FormControlLabel value={option} control={<Radio color=\"primary\"/>} label={option}/>)\r\n          }\r\n        </RadioGroup>\r\n      </FormControl> \r\n    </div>\r\n  )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './../styles/ClickHoldButton.css';\r\n\r\nexport default function ClickHoldButton({handleClickHold, className, isDisabled=false, children}) {\r\n\t/*\r\n\t\t* call handleClickHold when clicked\r\n\t\t* trigger handleClickHold when held\r\n\t\t* speed up triggering as held longer\r\n\r\n\t\ttrigger when passed key \r\n\t*/\r\n\t\r\n\t// =============================== Constants ==================================== //\r\n\tconst startIncrementTime =1000;\r\n  const incrementChangePerSecond = 0.25;\r\n\r\n\tconst [isDown, setIsDown] = useState(false);\r\n\tconst [holdTime, setHoldTime] = useState(0);\r\n  const [incrementTime, setIncrementTime] = useState(startIncrementTime);\r\n  \r\n\t// =============================== Event Handlers =============================== //\r\n\tfunction onMouseDown() {\r\n\t\tsetIsDown(true)\r\n\t}\r\n\r\n\tfunction onMouseUp() {\r\n\t\tsetIsDown(false)\r\n\t}\r\n\r\n\tfunction onMouseOut() {\r\n\t\tsetIsDown(false)\r\n\t}\r\n\r\n\tfunction onTrigger() { \r\n\t\thandleClickHold()\r\n\t}\r\n\r\n\tfunction updateIncrementTime() {\r\n    setIncrementTime(oldVal => Math.round(oldVal * (1 -  incrementChangePerSecond)))\r\n  }\r\n\r\n\t// =============================== Helper Fns  ================================== //\r\n\tfunction incrementHoldTime(time) {\r\n\t\tsetHoldTime(oldVal => oldVal + time)\r\n\t}\r\n\r\n\tfunction resetHold() {\r\n\t\tsetHoldTime(0)\r\n\t\tsetIncrementTime(startIncrementTime)\r\n\t}\r\n\r\n\t// =============================== Listen / Trigger ============================= //\r\n\t// ================ On Down\r\n\tuseEffect(() => {\r\n\t\tif(isDown) onTrigger()\r\n\t}, [isDown])\r\n\r\n\t// ================ Update Hold Time\r\n\tuseEffect(() => {\r\n\t\tlet holdTimeInterval;\r\n\r\n\t\tif(isDown) holdTimeInterval = setInterval(incrementHoldTime, 100, 100);\r\n \r\n    return () => { \r\n      clearInterval(holdTimeInterval)\r\n\t    resetHold()\r\n    }\r\n\t}, [isDown])\r\n\r\n\t// ================ Trigger Increment when held\r\n\t useEffect(() => {\r\n    if(holdTime >= incrementTime) {\r\n      onTrigger()\r\n      updateIncrementTime()\r\n      setHoldTime(0)\r\n    }\r\n  }, [holdTime, incrementTime])\r\n\r\n\t// =============================== Output ======================================= //\r\n\treturn (\r\n\t\t<button \r\n\t\t\tonMouseDown={onMouseDown} \r\n\t\t\tonMouseUp={onMouseUp} \r\n\t\t\tonMouseOut={onMouseOut}\r\n\t\t\tclassName={`${className} click-hold-button`}\r\n\t\t\tdisabled={isDisabled}>{children}</button>\r\n\t)\r\n}","export function playSound(sound) {\n  if(sound) {\n    sound.pause()\n    sound.currentTime = 0;\n    sound.play()\n  } \n}\n\nexport function stopSound(sound) {\n  if(sound) {\n    sound.pause()\n    sound.currentTime = 0;\n  } \n}\n\n","import React, {useState, useReducer, useEffect} from 'react';\r\nimport ClickHoldButton from './ClickHoldButton.jsx'; \r\nimport { AiOutlinePlus, AiOutlineMinus } from 'react-icons/ai';\r\nimport {playSound, addToEndOfInputNumber} from './utils.js';\r\nimport './../styles/BpmDisplay.css';\r\n\r\nexport default function BpmDisplay({bpm, setBpm, buttonSound}) {\r\n  /* \r\n    * show bpm\r\n    * show tempo\r\n\r\n    * on click - = change bpm\r\n    * on click + = change bpm\r\n    \r\n    * on click and hold - = speed up as held longer\r\n    * on click and hold + = speed up as held longer\r\n    \r\n\r\n    * on change input = change bpm  \r\n  */\r\n\r\n  // ========================== Constants ========================== //\r\n  const [tempo, setTempo] = useState('');\r\n  const minBpm = 1;\r\n  const maxBpm = 400;\r\n\r\n  // ========================== Event Handlers ========================== //\r\n  function onMinusClickHold() {\r\n    changeBpm(bpm - 1)\r\n    playSound(buttonSound)\r\n  }\r\n\r\n  function onPlusClickHold() { \r\n    changeBpm(bpm + 1)\r\n    playSound(buttonSound)\r\n  }\r\n\r\n  // ========================== Helper Fns ========================== //\r\n  function changeBpm(newBpm) {\r\n    if(newBpm >= minBpm && newBpm <= maxBpm) {\r\n      setBpm(newBpm)\r\n    }\r\n  }\r\n\r\n  function getTempo(bpm) {\r\n    if(bpm === 0) {\r\n      return '';\r\n    } else if(bpm >= 1 && bpm <= 20) {\r\n      return 'Larghissimo';\r\n    } else if (bpm >= 20 && bpm <= 40) {\r\n      return 'Grave';\r\n    } else if (bpm >= 40 && bpm <= 60) {\r\n      return 'Lento / Largo';\r\n    } else if (bpm >= 60 && bpm <= 66) {\r\n      return 'Larghetto';\r\n    } else if (bpm >= 67 && bpm <= 75) {\r\n      return 'Adagio';\r\n    } else if (bpm >= 76 && bpm <= 107) {\r\n      return 'Andante';\r\n    } else if (bpm >= 108 && bpm <= 119) {\r\n      return 'Moderato';\r\n    } else if (bpm >= 120 && bpm <= 167) {\r\n      return 'Allegro';\r\n    } else if (bpm >= 168 && bpm <= 200) {\r\n      return 'Presto';\r\n    } else if (bpm >= 201) {\r\n      return 'Prestissimo';\r\n    } \r\n  } \r\n\r\n  // ========================== Listen / Trigger ========================== //\r\n  // ============= set tempo on bpm change\r\n  useEffect(() => {\r\n    const newTempo = getTempo(bpm);\r\n    setTempo(newTempo)\r\n  }, [bpm])\r\n\r\n  // ========================== Output ========================== //\r\n  return (\r\n    <div className=\"bpm-display\">\r\n      <div className=\"bpm-container\">\r\n        <ClickHoldButton handleClickHold={onMinusClickHold} className=\"bpm-button\">\r\n          <AiOutlineMinus/>\r\n        </ClickHoldButton> \r\n          <div className=\"bpm-display-input\">{bpm}</div> \r\n        <ClickHoldButton handleClickHold={onPlusClickHold} className=\"bpm-button\">\r\n          <AiOutlinePlus/>\r\n        </ClickHoldButton> \r\n      </div>\r\n      <h3 className=\"tempo\">{tempo}</h3>\r\n    </div>\r\n  )\r\n}","import React, {useState} from 'react';\r\nimport './../styles/VolumeSlider.css';\r\n\r\nexport default function VolumeSlider({volume, setVolume}) {\r\n\t// ============================ Constants ================================= //\r\n\tconst maxValue = 1;\r\n\tconst minValue = 0;\r\n\tconst valueRatio = (maxValue - minValue) / 100;\r\n  const [sliderValue, setSliderValue] = useState(getSliderValue(volume));\r\n  \r\n  // ============================ Event Handlers ============================ //\r\n  function onSliderChange(e) {\r\n    setSliderValue(e.target.value);\r\n    updateVolume(e.target.value);\r\n  }\r\n\r\n  // ============================ Helper Fns =============================== //\r\n  function updateVolume(value) {\r\n    let newVolume = convertSliderValue(value);\r\n    setVolume(newVolume);\r\n  }\r\n\r\n  function convertSliderValue(value) { \r\n    return value * valueRatio;\r\n  }\r\n\r\n  function getSliderValue(value) { \r\n    return value / valueRatio;\r\n  }\r\n  \r\n  // ============================ Output =================================== //\r\n  return (\r\n    <input type=\"range\" min=\"0\" max=\"100\" \r\n      className=\"volume-slider\"\r\n      value={sliderValue} \r\n      onChange={onSliderChange}/> \r\n  )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport ClickHoldButton from './ClickHoldButton.jsx';\r\nimport {playSound, addToEndOfInputNumber} from './utils.js';\r\nimport './../styles/TimerInput.css';\r\n\r\nexport default function TimerInput({value, setValue, isDisabled, min, max, buttonSound, children}) {\r\n\tconst i = Date.parse(new Date());\r\n\tconst timerInputId = `timer-input-${i}`;\r\n\r\n\t// ============================= Event Handlers ============================= //\r\n\tfunction onClickMinus() {\r\n\t\tconst newVal = value - 1;\r\n\t\tif(newVal >= min && newVal <= max) {\r\n\t\t\tsetValue(newVal)\r\n\t\t\tplaySound(buttonSound)\r\n\t\t} \r\n\t}\r\n\r\n\tfunction onClickPlus() {\r\n\t\tconst newVal = value + 1; \r\n\t\tif(newVal >= min && newVal <= max) {\r\n\t\t\tsetValue(newVal)\r\n\t\t\tplaySound(buttonSound)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onChange(e) {  \r\n\t\taddToEndOfInputNumber(e, 2, min, max, value, setValue)\r\n\t} \r\n\r\n\r\n\t// ============================= Helper Fns ============================= //\r\n\tfunction addLeadingZero(number) {\r\n\t\tlet string = String(number);\r\n\r\n\t\tif(number <= 0) string = '00';\r\n\t\tif(string.length < 2) string = '0' + string;\r\n\r\n\t\treturn string;\r\n\t} \r\n\r\n\tfunction addToEndOfInputNumber(e, maxLength, min, max, value, setValue) {\r\n\t  let newVal = String(e.target.value);    \r\n\r\n\t  if(newVal.length > maxLength) newVal = newVal.slice(1);\r\n\t  newVal = Number(newVal);\r\n\r\n\t  if((newVal >= min && newVal <= max) || newVal === '') {\r\n\t    setValue(newVal)\r\n\t  }\r\n\t}\r\n\r\n\t// ============================= Output ================================ //\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className=\"timer-heading\">{children}</h4>\r\n\t\t\t<div className=\"timer-input-container\"> \r\n\t\t\t\t<ClickHoldButton \r\n\t\t\t\t\thandleClickHold={onClickMinus} \r\n\t\t\t\t\tisDisabled={isDisabled} \r\n\t\t\t\t\tclassName=\"timer-button\">-</ClickHoldButton>\r\n\t\t\t\t\t<input id={timerInputId}\r\n\t\t\t\t\t\ttype=\"number\" \r\n\t\t\t\t\t\tonChange={onChange} \r\n\t\t\t\t\t\tclassName=\"timer-input\" \r\n\t\t\t\t\t\tvalue={addLeadingZero(value)}/>\r\n\t\t\t\t<ClickHoldButton \r\n\t\t\t\t\thandleClickHold={onClickPlus} \r\n\t\t\t\t\tisDisabled={isDisabled} \r\n\t\t\t\t\tclassName=\"timer-button\">+</ClickHoldButton>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState, useEffect} from 'react'; \r\nimport TimerInput from './TimerInput.jsx';\r\nimport './../styles/Timer.css';\r\n\r\nfunction Timer({finishedSound, buttonSound}) {  \r\n\t// ==================================== Constants ==================================== //\r\n\tconst [playMode, setPlayMode] = useState('stop');\r\n\tconst [hours, setHours] = useState(0);\r\n\tconst [minutes, setMinutes] = useState(0);\r\n\tconst [seconds, setSeconds] = useState(0);\r\n\tconst [buttonsDisabled, setButtonsDisabled] = useState(false);\r\n\t\r\n\t// ==================================== Event Handlers =============================== //\r\n\tfunction onClickPlay() {\r\n\t\tif(seconds > 0 || minutes > 0 || hours > 0) { \r\n\t\t\tsetPlayMode('play')\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onClickPause() {\r\n\t\tsetPlayMode('pause')\r\n\t}\r\n\r\n\tfunction onClickStop() { \r\n\t\tsetPlayMode('stop')\r\n\t\tresetTime()\r\n\t}\r\n\r\n\t// ==================================== Helper Fns ==================================== //\r\n\tfunction decrementTime(seconds, minutes, hours) {\r\n\t\tif (seconds > 0) decrementSeconds(seconds)\r\n\t\telse if(seconds === 0 && minutes > 0) decrementMinutes(minutes)\r\n\t\telse if(seconds === 0 && minutes === 0 && hours > 0) decrementHours(hours)\r\n\t}\r\n\r\n\tfunction checkIfFinished(seconds, minutes, hours) {\r\n\t\tif(seconds === 1 && minutes === 0 && hours === 0) finishTime()\r\n\t}\r\n\r\n\tfunction decrementSeconds(seconds) { \r\n\t\tsetSeconds(seconds - 1)\r\n\t}\r\n\r\n\tfunction decrementMinutes(minutes) {\r\n\t\tsetMinutes(minutes - 1)\r\n\t\tsetSeconds(59)\r\n\t}\r\n\r\n\tfunction decrementHours(hours) {\r\n\t\tsetHours(hours - 1) \r\n\t\tsetMinutes(59)\r\n\t\tsetSeconds(59)\r\n\t}\r\n\r\n\tfunction finishTime() { \r\n\t\tfinishedSound.play()\r\n\t\tresetTime()\r\n\t}\r\n\r\n\tfunction resetTime() { \r\n\t\tsetHours(0)\r\n\t\tsetMinutes(0)\r\n\t\tsetSeconds(0)\r\n\t}\r\n\r\n\t// ==================================== Listen / Trigger ================================== //\r\n\t// ================== Play Mode\r\n\tuseEffect(() => { \r\n\t\tif(playMode === 'play')\r\n\t\tif(playMode === 'pause') \r\n\t\tif(playMode === 'stop') resetTime() \r\n\t}, [playMode]) \r\n\r\n\t// ================== Run Timer\r\n\tuseEffect(() => {\r\n\t\tlet timeout;\r\n\r\n\t\tif(playMode === 'play') {\r\n\t\t\ttimeout = setTimeout(() => {\r\n\t\t\t\tcheckIfFinished(seconds, minutes, hours)\r\n\t\t\t\tdecrementTime(seconds, minutes, hours)\r\n\t\t\t}, 1000)\r\n\t\t}\r\n\r\n\t\treturn () => { clearTimeout(timeout) }\r\n\t}, [playMode, seconds, minutes, hours])\r\n\r\n\t// ================== Disable buttons\r\n\tuseEffect(() => {\r\n\t\tif(playMode === 'play') setButtonsDisabled(true)\r\n\t\tif(playMode !== 'play') setButtonsDisabled(false)\r\n\t}, [playMode])\r\n\r\n\t// ==================================== Output =========================================== //\r\n\treturn ( \r\n\t\t<div className=\"timer-container\">\r\n\t\t\t<div className=\"timer-inputs-container\">\r\n\t\t\t\t<TimerInput \r\n\t\t\t\t\tvalue={hours}\r\n\t\t\t\t\tsetValue={setHours} \r\n\t\t\t\t\tbuttonSound={buttonSound} \r\n\t\t\t\t\tisDisabled={buttonsDisabled}\r\n\t\t\t\t\tmin={0} \r\n\t\t\t\t\tmax={99}>Hours</TimerInput>\r\n\t\t\t\t<TimerInput \r\n\t\t\t\t\tvalue={minutes} \r\n\t\t\t\t\tsetValue={setMinutes} \r\n\t\t\t\t\tbuttonSound={buttonSound} \r\n\t\t\t\t\tisDisabled={buttonsDisabled}\r\n\t\t\t\t\tmin={0} \r\n\t\t\t\t\tmax={59}>Minutes</TimerInput>\r\n\t\t\t\t<TimerInput \r\n\t\t\t\t\tvalue={seconds} \r\n\t\t\t\t\tsetValue={setSeconds} \r\n\t\t\t\t\tbuttonSound={buttonSound} \r\n\t\t\t\t\tisDisabled={buttonsDisabled}\r\n\t\t\t\t\tmin={0} \r\n\t\t\t\t\tmax={59}>Seconds</TimerInput>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"timer-button-container\">\r\n\t\t\t\t<button type=\"button\" onClick={onClickPlay}>Play</button>\r\n\t\t\t\t<button type=\"button\" onClick={onClickPause}>Pause</button>\r\n\t\t\t\t<button type=\"button\" onClick={onClickStop}>Stop</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Timer;","import React, { useEffect, useState, useReducer } from 'react';\nimport AudioElements from './components/AudioElements.jsx';\nimport SettingsViewToggle from './components/SettingsViewToggle.jsx';\nimport SettingsView from './components/SettingsView.jsx';\nimport BpmDisplay from './components/BpmDisplay.jsx';\nimport VolumeSlider from './components/VolumeSlider.jsx';\nimport Timer from './components/Timer.jsx';\nimport { BiPlayCircle, BiStopCircle } from 'react-icons/bi';\nimport {playSound, stopSound} from './components/utils.js';\nimport './styles/Metronome.css';\n\nexport default function Metronome() {\n  // =============================== Constants =============================== //\n  // =============== bpm\n  const [bpm, setBpm] = useState(60);\n\n  // =============== Audio\n  const audioIDs = [\n    \"Wood\", \n    \"Click\", \n    \"Snare-Drum\", \n    \"Kick-Drum\", \n    \"Dog\",\n    \"Cat\", \n    \"Bell\",\n    \"Snap\",\n  ]; \n\n  const metronomeSounds = [\n    \"Wood\",\n    \"Click\", \n    \"Snare-Drum\", \n    \"Kick-Drum\", \n    \"Dog\",\n    \"Cat\", \n  ];\n\n  const [selectedMetronomeSound, setSelectedMetronomeSound] = useState(metronomeSounds[0]);\n  const [metronomeSound, setMetronomeSound] = useState(null); \n  const [metronomeInterval, setMetronomeInterval] = useState(null);\n  const [metronomeTime, setMetronomeTime] = useState(getMetronomeTime(bpm));\n  \n  const [timerFinishedSound, setTimerFinishedSound] = useState(null);\n  const [buttonClickSound, setButtonClickSound] = useState(null);\n\n  // =============== Mode\n  const [playMode, setPlayMode] = useState('stop');\n\n  // =============== View\n  const [showSettingsView, setShowSettingsView] = useState(false);\n \n  // =============== Volume\n  const [volume, setVolume] = useState(0.5);\n\n  // =============================== Event Handlers =============================== //\n  function onSettingsViewToggleClick() {\n    setShowSettingsView(oldVal => !oldVal)\n    if(!showSettingsView && !hasInlineHeight('metronomeContainer')) keepHeight('metronomeContainer')\n  }\n\n  function onSettingsOptionClick(e) { \n    setSelectedMetronomeSound(e.target.value)\n  }\n\n  function onAudioLoad() {\n    updateMetronomeSound(selectedMetronomeSound)\n    setTimerFinishedSound(document.getElementById('Bell'))\n    setButtonClickSound(document.getElementById('Snap'))\n  }\n\n  function onVolumeChange(newVolume) {\n    audioIDs.forEach(id => changeVolume(id, newVolume))\n  } \n\n  function onClickPlay() {\n    setPlayMode('play') \n    playSound(metronomeSound) \n  }\n\n  function onClickStop() {\n    setPlayMode('stop')\n  }\n\n  function onPlay(intervalTime, playSound) { \n    return startMetronomeInterval(intervalTime, playSound)\n  }\n\n  function onStop(interval) {  \n    stopMetronomeInterval(interval)\n  }\n\n  // =============================== Helper Fns =============================== //\n  function changeVolume(id, newVolume) {\n    const element = document.getElementById(id);\n    if(element) element.volume = newVolume;\n  }\n\n  function getElement(id) {\n    return document.getElementById(id);\n  }\n\n  function startMetronomeInterval(intervalTime, sound) {\n    return setInterval(() => { \n      playSound(sound)\n    }, intervalTime) \n  }\n\n  function stopMetronomeInterval(interval) {\n    clearInterval(interval) \n  }\n\n  function getMetronomeTime(bpm) {\n    return 60000 / bpm;\n  }\n\n  function keepHeight(id) {\n    const element = document.getElementById(id);\n    const style = window.getComputedStyle(element); \n    element.style.height = style.height;\n  }\n\n  function hasInlineHeight(id) {\n    const element = document.getElementById(id); \n    return element.style.height !== '';\n  }\n\n  function updateMetronomeSound(id) {\n    const newSound = document.getElementById(selectedMetronomeSound);\n    setMetronomeSound(newSound)\n  }\n\n  // =============================== Listen / trigger =============================== //\n  // =============== Change Volume\n  useEffect(() => {\n    onVolumeChange(volume);\n  }, [volume]);\n\n  // =============== Play Stop  \n  useEffect(() => {\n    let thisInterval;\n\n    if(playMode === 'play') thisInterval = onPlay(metronomeTime, metronomeSound);\n\n    return () => { onStop(thisInterval) }\n  }, [playMode, metronomeTime, metronomeSound]) \n\n  // =============== Change Bpm \n  useEffect(() => { \n    const newTime = getMetronomeTime(bpm);\n    setMetronomeTime(newTime) \n  }, [bpm]) \n\n  // =============== Change MetronomeSoundId\n  useEffect(() => {\n    updateMetronomeSound(selectedMetronomeSound)\n  }, [selectedMetronomeSound]) \n \n  // =============================== Output =============================== //\n  return (\n    <div>\n      <AudioElements ids={audioIDs} onLoad={onAudioLoad}/>\n\n      <div className=\"metronome-container\" id=\"metronomeContainer\"> \n        <SettingsViewToggle handleClick={onSettingsViewToggleClick}/>\n\n        <SettingsView \n          show={showSettingsView} \n          handleClick={onSettingsOptionClick} \n          options={metronomeSounds}\n          selectedOption={selectedMetronomeSound}\n        />\n\n        <div className=\"metronome-view\" hidden={showSettingsView}>\n          <div className=\"bpm-display-container\">\n            <BpmDisplay bpm={bpm} setBpm={setBpm} buttonSound={buttonClickSound}/>\n          </div>\n\n          <div className=\"button-container\">\n            <BiPlayCircle onClick={onClickPlay} id=\"playButton\" className=\"play-mode-button\"/>\n            <BiStopCircle  onClick={onClickStop} id=\"stopButton\" className=\"play-mode-button\"/>\n          </div> \n\n          <div className=\"volume-slider-container\"> \n            <VolumeSlider volume={volume} setVolume={setVolume}/>\n          </div>\n          <Timer finishedSound={timerFinishedSound} buttonSound={buttonClickSound}/>\n        </div> \n      </div>  \n    </div>\n  )\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Metronome from \"./Metronome.jsx\";\n\nvar root = document.querySelector(\"#root\");\n\nReactDOM.render(\n\t<>\n\t\t<Metronome/>  \n\t</>,\n\troot\n);"],"sourceRoot":""}